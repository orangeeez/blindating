System.register(['angular2/core', 'angular2/common'], function(exports_1) {
    "use strict";
    var __extends = (this && this.__extends) || function (d, b) {
        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = (this && this.__metadata) || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var __param = (this && this.__param) || function (paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); }
    };
    var core_1, common_1;
    var paginationConfig, PAGINATION_TEMPLATE, Pagination, pagerConfig, PAGER_TEMPLATE, Pager, PAGINATION_DIRECTIVES, pagination;
    return {
        setters:[
            function (core_1_1) {
                core_1 = core_1_1;
            },
            function (common_1_1) {
                common_1 = common_1_1;
            }],
        execute: function() {
            paginationConfig = {
                maxSize: void 0,
                itemsPerPage: 10,
                boundaryLinks: false,
                directionLinks: true,
                firstText: 'First',
                previousText: 'Previous',
                nextText: 'Next',
                lastText: 'Last',
                rotate: true
            };
            PAGINATION_TEMPLATE = "\n  <ul class=\"pagination\" [ngClass]=\"classMap\">\n    <li class=\"pagination-first page-item\"\n        *ngIf=\"boundaryLinks\"\n        [class.disabled]=\"noPrevious()||disabled\">\n      <a class=\"page-link\" href (click)=\"selectPage(1, $event)\">{{getText('first')}}</a>\n    </li>\n\n    <li class=\"pagination-prev page-item\"\n        *ngIf=\"directionLinks\"\n        [class.disabled]=\"noPrevious()||disabled\">\n      <a class=\"page-link\" href (click)=\"selectPage(page - 1, $event)\">{{getText('previous')}}</a>\n      </li>\n\n    <li *ngFor=\"#pg of pages\"\n        [class.active]=\"pg.active\"\n        [class.disabled]=\"disabled&&!pg.active\"\n        class=\"pagination-page page-item\">\n      <a class=\"page-link\" href (click)=\"selectPage(pg.number, $event)\">{{pg.text}}</a>\n    </li>\n\n    <li class=\"pagination-next page-item\"\n        *ngIf=\"directionLinks\"\n        [class.disabled]=\"noNext()\">\n      <a class=\"page-link\" href (click)=\"selectPage(page + 1, $event)\">{{getText('next')}}</a></li>\n\n    <li class=\"pagination-last page-item\"\n        *ngIf=\"boundaryLinks\"\n        [class.disabled]=\"noNext()\">\n      <a class=\"page-link\" href (click)=\"selectPage(totalPages, $event)\">{{getText('last')}}</a></li>\n  </ul>\n  ";
            Pagination = (function () {
                function Pagination(cd, renderer, elementRef) {
                    this.cd = cd;
                    this.renderer = renderer;
                    this.elementRef = elementRef;
                    this.numPages = new core_1.EventEmitter();
                    this.pageChanged = new core_1.EventEmitter();
                    this.inited = false;
                    this.onChange = function (_) {
                    };
                    this.onTouched = function () {
                    };
                    cd.valueAccessor = this;
                    this.config = this.config || paginationConfig;
                }
                Object.defineProperty(Pagination.prototype, "itemsPerPage", {
                    get: function () {
                        return this._itemsPerPage;
                    },
                    set: function (v) {
                        this._itemsPerPage = v;
                        this.totalPages = this.calculateTotalPages();
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Pagination.prototype, "totalItems", {
                    get: function () {
                        return this._totalItems;
                    },
                    set: function (v) {
                        this._totalItems = v;
                        this.totalPages = this.calculateTotalPages();
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Pagination.prototype, "totalPages", {
                    get: function () {
                        return this._totalPages;
                    },
                    set: function (v) {
                        this._totalPages = v;
                        this.numPages.emit(v);
                        if (this.inited) {
                            this.selectPage(this.page);
                        }
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(Pagination.prototype, "page", {
                    get: function () {
                        return this._page;
                    },
                    set: function (value) {
                        this._page = (value > this.totalPages) ? this.totalPages : (value || 1);
                        this.pageChanged.emit({
                            page: this._page,
                            itemsPerPage: this.itemsPerPage
                        });
                    },
                    enumerable: true,
                    configurable: true
                });
                Pagination.prototype.ngOnInit = function () {
                    this.classMap = this.elementRef.nativeElement.getAttribute('class') || '';
                    this.maxSize = typeof this.maxSize !== 'undefined' ? this.maxSize : paginationConfig.maxSize;
                    this.rotate = typeof this.rotate !== 'undefined' ? this.rotate : paginationConfig.rotate;
                    this.boundaryLinks = typeof this.boundaryLinks !== 'undefined' ? this.boundaryLinks : paginationConfig.boundaryLinks;
                    this.directionLinks = typeof this.directionLinks !== 'undefined' ? this.directionLinks : paginationConfig.directionLinks;
                    this.itemsPerPage = typeof this.itemsPerPage !== 'undefined' ? this.itemsPerPage : paginationConfig.itemsPerPage;
                    this.totalPages = this.calculateTotalPages();
                    this.pages = this.getPages(this.page, this.totalPages);
                    this.page = this.cd.value;
                    this.inited = true;
                };
                Pagination.prototype.writeValue = function (value) {
                    this.page = value;
                    this.pages = this.getPages(this.page, this.totalPages);
                };
                Pagination.prototype.selectPage = function (page, event) {
                    if (event) {
                        event.preventDefault();
                    }
                    if (!this.disabled) {
                        if (event && event.target) {
                            var target = event.target;
                            target.blur();
                        }
                        this.writeValue(page);
                        this.cd.viewToModelUpdate(this.page);
                    }
                };
                Pagination.prototype.getText = function (key) {
                    return this[key + 'Text'] || paginationConfig[key + 'Text'];
                };
                Pagination.prototype.noPrevious = function () {
                    return this.page === 1;
                };
                Pagination.prototype.noNext = function () {
                    return this.page === this.totalPages;
                };
                Pagination.prototype.makePage = function (number, text, isActive) {
                    return {
                        number: number,
                        text: text,
                        active: isActive
                    };
                };
                Pagination.prototype.getPages = function (currentPage, totalPages) {
                    var pages = [];
                    var startPage = 1;
                    var endPage = totalPages;
                    var isMaxSized = typeof this.maxSize !== 'undefined' && this.maxSize < totalPages;
                    if (isMaxSized) {
                        if (this.rotate) {
                            startPage = Math.max(currentPage - Math.floor(this.maxSize / 2), 1);
                            endPage = startPage + this.maxSize - 1;
                            if (endPage > totalPages) {
                                endPage = totalPages;
                                startPage = endPage - this.maxSize + 1;
                            }
                        }
                        else {
                            startPage = ((Math.ceil(currentPage / this.maxSize) - 1) * this.maxSize) + 1;
                            endPage = Math.min(startPage + this.maxSize - 1, totalPages);
                        }
                    }
                    for (var number = startPage; number <= endPage; number++) {
                        var page = this.makePage(number, number.toString(), number === currentPage);
                        pages.push(page);
                    }
                    if (isMaxSized && !this.rotate) {
                        if (startPage > 1) {
                            var previousPageSet = this.makePage(startPage - 1, '...', false);
                            pages.unshift(previousPageSet);
                        }
                        if (endPage < totalPages) {
                            var nextPageSet = this.makePage(endPage + 1, '...', false);
                            pages.push(nextPageSet);
                        }
                    }
                    return pages;
                };
                Pagination.prototype.calculateTotalPages = function () {
                    var totalPages = this.itemsPerPage < 1 ? 1 : Math.ceil(this.totalItems / this.itemsPerPage);
                    return Math.max(totalPages || 0, 1);
                };
                Pagination.prototype.registerOnChange = function (fn) {
                    this.onChange = fn;
                };
                Pagination.prototype.registerOnTouched = function (fn) {
                    this.onTouched = fn;
                };
                __decorate([
                    core_1.Input(), 
                    __metadata('design:type', Number)
                ], Pagination.prototype, "maxSize", void 0);
                __decorate([
                    core_1.Input(), 
                    __metadata('design:type', Boolean)
                ], Pagination.prototype, "boundaryLinks", void 0);
                __decorate([
                    core_1.Input(), 
                    __metadata('design:type', Boolean)
                ], Pagination.prototype, "directionLinks", void 0);
                __decorate([
                    core_1.Input(), 
                    __metadata('design:type', String)
                ], Pagination.prototype, "firstText", void 0);
                __decorate([
                    core_1.Input(), 
                    __metadata('design:type', String)
                ], Pagination.prototype, "previousText", void 0);
                __decorate([
                    core_1.Input(), 
                    __metadata('design:type', String)
                ], Pagination.prototype, "nextText", void 0);
                __decorate([
                    core_1.Input(), 
                    __metadata('design:type', String)
                ], Pagination.prototype, "lastText", void 0);
                __decorate([
                    core_1.Input(), 
                    __metadata('design:type', Boolean)
                ], Pagination.prototype, "rotate", void 0);
                __decorate([
                    core_1.Input(), 
                    __metadata('design:type', Boolean)
                ], Pagination.prototype, "disabled", void 0);
                __decorate([
                    core_1.Output(), 
                    __metadata('design:type', (typeof (_a = typeof core_1.EventEmitter !== 'undefined' && core_1.EventEmitter) === 'function' && _a) || Object)
                ], Pagination.prototype, "numPages", void 0);
                __decorate([
                    core_1.Output(), 
                    __metadata('design:type', (typeof (_b = typeof core_1.EventEmitter !== 'undefined' && core_1.EventEmitter) === 'function' && _b) || Object)
                ], Pagination.prototype, "pageChanged", void 0);
                __decorate([
                    core_1.Input(), 
                    __metadata('design:type', Object)
                ], Pagination.prototype, "itemsPerPage", null);
                __decorate([
                    core_1.Input(), 
                    __metadata('design:type', Number)
                ], Pagination.prototype, "totalItems", null);
                Pagination = __decorate([
                    core_1.Component({
                        selector: 'pagination[ngModel]',
                        template: PAGINATION_TEMPLATE,
                        directives: [common_1.NgFor, common_1.NgIf]
                    }),
                    __param(0, core_1.Self()), 
                    __metadata('design:paramtypes', [(typeof (_c = typeof common_1.NgModel !== 'undefined' && common_1.NgModel) === 'function' && _c) || Object, (typeof (_d = typeof core_1.Renderer !== 'undefined' && core_1.Renderer) === 'function' && _d) || Object, (typeof (_e = typeof core_1.ElementRef !== 'undefined' && core_1.ElementRef) === 'function' && _e) || Object])
                ], Pagination);
                return Pagination;
                var _a, _b, _c, _d, _e;
            }());
            exports_1("Pagination", Pagination);
            pagerConfig = {
                itemsPerPage: 10,
                previousText: '« Previous',
                nextText: 'Next »',
                align: true
            };
            PAGER_TEMPLATE = "\n    <ul class=\"pager\">\n      <li [class.disabled]=\"noPrevious()\" [class.previous]=\"align\" [ngClass]=\"{'pull-right': align}\">\n        <a href (click)=\"selectPage(page - 1, $event)\">{{getText('previous')}}</a>\n      </li>\n      <li [class.disabled]=\"noNext()\" [class.next]=\"align\" [ngClass]=\"{'pull-right': align}\">\n        <a href (click)=\"selectPage(page + 1, $event)\">{{getText('next')}}</a>\n      </li>\n  </ul>\n";
            Pager = (function (_super) {
                __extends(Pager, _super);
                function Pager(cd, renderer, elementRef) {
                    _super.call(this, cd, renderer, elementRef);
                    this.config = pagerConfig;
                }
                Pager = __decorate([
                    core_1.Component({
                        selector: 'pager[ngModel]',
                        properties: [
                            'align',
                            'totalItems', 'itemsPerPage',
                            'previousText', 'nextText',
                        ],
                        template: PAGER_TEMPLATE,
                        directives: [common_1.NgClass]
                    }),
                    __param(0, core_1.Self()), 
                    __metadata('design:paramtypes', [(typeof (_a = typeof common_1.NgModel !== 'undefined' && common_1.NgModel) === 'function' && _a) || Object, (typeof (_b = typeof core_1.Renderer !== 'undefined' && core_1.Renderer) === 'function' && _b) || Object, (typeof (_c = typeof core_1.ElementRef !== 'undefined' && core_1.ElementRef) === 'function' && _c) || Object])
                ], Pager);
                return Pager;
                var _a, _b, _c;
            }(Pagination));
            exports_1("Pager", Pager);
            exports_1("PAGINATION_DIRECTIVES", PAGINATION_DIRECTIVES = [Pagination, Pager]);
            exports_1("pagination", pagination = [Pagination, Pager]);
        }
    }
});
//# sourceMappingURL=pagination.js.map